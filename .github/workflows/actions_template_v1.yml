name: Workflow 1
on:
  push:
    branches: [main]
  workflow_dispatch:
  
env:
  CODEQL_RESULTS_PATH: ${{ github.workspace }}
  go-version: '1.20.1'
  terraform-tflint-version: 'latest'
  
#   ECR_REPOSITORY: $
#   AWS_REGION: AWS_REGION 
#   ECS_SERVICE: ECS_SERVICE
#   ECS_CLUSTER: ECS_CLUSTER
#   ECS_TASK_DEFINITION: ECS_TASK_DEFINITION
#   CONTAINER_NAME: CONTAINER_NAME
  
permissions:
  contents: read
  actions: read
  security-events: write
  
jobs:
  build:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
          
      - name: Get dependencies
        run: go get -v -t -d ./...

      - name: write key
        run: echo "${{ secrets.PRIVATE_KEY }}" > private.pem

      
      - name: Build & Test 
        run: |
          go clean -modcache &&
          go build -v ./... &&
          go test -v ./... &&
          ./github-app
          
        env:
          APP_ID: ${{ secrets.APP_ID }} 
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}
                 
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: go
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload CodeQL results
        uses: actions/upload-artifact@v2
        with:
          name: codeql-results
          path: ${{ env.CODEQL_RESULTS_PATH }}

  scan:
    needs: build     
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Checkov scan
        uses: bridgecrewio/checkov-action@master
          
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color
          
      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint
        with:
          tflint_version: ${{ env.terraform-tflint-version }}
          
      - name: Show version
        run: tflint --version
        
      - name: Init TFLint
        run: tflint --init
        
      - name: Run TFLint
        run: tflint -f compact

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ secrets.vs1 }}

      - name: Helm lint
        run: helm lint .
  
  
  
#   deploy:
#     needs: scan
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       actions: write
      
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
        
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: $       
#           aws-region: $
# #           ${{ env.AWS_REGION }}
      
#       - name: Login to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v1
      
#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: $
# #           ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: $
# #           ${{ github.sha }}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
#   # Do we need this?:      
#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
          
#       - name: Install Helm Chart
#         uses: bitovi/github-actions-deploy-eks-helm@v1.2.3
        

    
